import { makeAugmentedSchema } from "neo4j-graphql-js"
import { merge } from "lodash"
import {
    DateTime
} from '@okgrow/graphql-scalars'
import { schemaDirectives, directives } from "./directives"

//---------------------- MODULES -----------------------------
import { resolvers as UserResolvers, typeDefs as UserDefs } from "./User";
//-------------------- END MODULES ---------------------------

//This is for you create separated Queries and Mutations
const typeDefs = `
  scalar DateTime
  
  ${directives}
  
  type Query {
    _empty: String
  }
  type Mutation {
    _empty: String
  }
  
`;

//Global Resolvers
const resolvers = {
    DateTime
};

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

export const schema = makeAugmentedSchema({
    typeDefs: typeDefs + UserDefs,
    resolvers: merge(resolvers, UserResolvers),
    schemaDirectives,
    config: {
        query: false,
        mutation: false
    }
})
